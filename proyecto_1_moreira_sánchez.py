# -*- coding: utf-8 -*-
"""PROYECTO #1 - MOREIRA SÁNCHEZ

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QJar8D_cHthr5UGnY2HPJBHCxJx4TrL7
"""

# Importar librerías
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler

# Lectura del dataset
from google.colab import drive
drive.mount('/content/drive')

ruta = "/content/drive/MyDrive/PROYECTOI/Churn_Modelling.csv"
data = pd.read_csv(ruta)

# Ver las primeras filas del dataset
data.head()

# Información general sobre las columnas, tipos de datos y valores nulos
data.info()

# Estadísticas descriptivas de las variables numéricas
data.describe()

# Verificar si hay valores nulos en el dataset
data.isnull().sum()

# Eliminar columnas irrelevantes
data = data.drop(columns=['RowNumber', 'CustomerId', 'Surname'])

# Verificar que las columnas se hayan eliminado correctamente
data.head()

# Verificar si hay filas duplicadas en el dataset
data.duplicated().sum()

# Convertir las columnas 'Geography' y 'Gender' en variables dummy
data = pd.get_dummies(data, columns=['Geography', 'Gender'], drop_first=True)

# Mostrar las primeras filas para verificar las nuevas columnas
print(data.head())

# Mostrar los tipos de datos de las columnas
print("\nTipos de datos de las columnas:")
print(data.dtypes)

# Definir las columnas numéricas que necesitamos escalar
numerical_columns = ['CreditScore', 'Age', 'Balance', 'NumOfProducts', 'EstimatedSalary']

# Crear el objeto scaler
scaler = StandardScaler()

# Escalar las variables numéricas
data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

# Verificar que las variables hayan sido escaladas correctamente
print(data[numerical_columns].head())

# Definir las columnas numéricas a graficar
numerical_columns = ['CreditScore', 'Age', 'Balance', 'NumOfProducts', 'EstimatedSalary']

# Crear los boxplots para cada columna numérica
plt.figure(figsize=(15, 10))

for i, column in enumerate(numerical_columns, 1):
    plt.subplot(2, 3, i)  # Crear una subgráfica para cada variable
    sns.boxplot(data[column])  # Crear el boxplot para la columna
    plt.title(f'Boxplot de {column}')  # Título de la gráfica

# Ajustar el espacio entre los gráficos
plt.tight_layout()

# Mostrar los boxplots
plt.show()

# Definir las columnas numéricas para las que eliminaremos los outliers
columns_to_check = ['CreditScore', 'Age', 'NumOfProducts']

# Calcular el IQR para cada columna seleccionada
Q1 = data[columns_to_check].quantile(0.25)  # Cuartil 1
Q3 = data[columns_to_check].quantile(0.75)  # Cuartil 3
IQR = Q3 - Q1  # Rango intercuartílico

# Definir los límites inferior y superior para cada columna
lower_bound = Q1 - 1.2 * IQR  # Límite inferior
upper_bound = Q3 + 1.2 * IQR  # Límite superior

# Eliminar los outliers en las columnas seleccionadas
data_no_outliers = data[~((data[columns_to_check] < lower_bound) | (data[columns_to_check] > upper_bound)).any(axis=1)]

# Verificar el tamaño de los datos después de eliminar los outliers
print(f"Datos después de eliminar outliers: {data_no_outliers.shape[0]} filas.")

# Definir las columnas numéricas para las que ya eliminamos outliers
columns_to_check = ['CreditScore', 'Age', 'NumOfProducts']

# Crear los boxplots para cada columna seleccionada sin outliers
plt.figure(figsize=(15, 5))

for i, column in enumerate(columns_to_check, 1):
    plt.subplot(1, 3, i)  # Crear una subgráfica por cada variable
    sns.boxplot(data=data_no_outliers[column])  # Crear el boxplot para la columna
    plt.title(f'Boxplot de {column} (sin outliers)')  # Título de la gráfica

# Ajustar el espacio entre los gráficos
plt.tight_layout()

# Mostrar los boxplots
plt.show()

# 1. Verificar si hay valores nulos
print("Valores nulos por columna:")
print(data.isnull().sum().to_string())
print("\n")

# 2. Verificar los tipos de datos de las columnas
print("Tipos de datos de las columnas:")
print(data.dtypes.to_string())
print("\n")

# 3. Estadísticas descriptivas (para columnas numéricas)
print("Estadísticas descriptivas antes de la normalización:")
print(data.describe().loc[['mean', 'std', 'min', 'max']].to_string())
print("\n")

# 4. Verificar el número de filas antes y después de eliminar outliers
print(f"Número de filas antes de eliminar outliers: {data.shape[0]}")
print(f"Número de filas después de eliminar outliers: {data_no_outliers.shape[0]}")
print("\n")

# 5. Verificar estadísticas de las columnas después de la normalización
print("Estadísticas después de la normalización:")
print(data_no_outliers[numerical_columns].describe().loc[['mean', 'std', 'min', 'max']].to_string())

# Lista de las columnas numéricas que te gustaría analizar
numerical_columns = ['CreditScore', 'Age', 'Balance', 'NumOfProducts', 'EstimatedSalary']

# Crear histogramas para cada columna
plt.figure(figsize=(15, 10))

for i, column in enumerate(numerical_columns, 1):
    plt.subplot(2, 3, i)  # Crear una subgráfica por cada variable
    sns.histplot(data[column], kde=True, bins=20)  # Histograma con línea KDE
    plt.title(f'Distribución de {column}')  # Título para cada gráfico

# Ajustar el espacio entre las gráficas
plt.tight_layout()

# Mostrar los histogramas
plt.show()

# Crear un gráfico de dispersión (scatter plot) para Age vs Balance
plt.figure(figsize=(10, 6))
sns.scatterplot(x=data['Age'], y=data['Balance'])
plt.title('Dispersión de Age vs Balance')
plt.xlabel('Age')
plt.ylabel('Balance')
plt.show()

# Exportamos el nuevo dataset limpio

ruta = "/content/drive/MyDrive/PROYECTOI/Dataset_Nuevo.csv"
data.to_csv(ruta, index=False)